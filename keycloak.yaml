apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: keycloak
      app.kubernetes.io/name: keycloak
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/name: keycloak
    spec:
      volumes:
        - name: startup
          configMap:
            name: keycloak-startup
            items:
              - key: keycloak.cli
                path: keycloak.cli
            defaultMode: 365
      initContainers:
        - name: pgchecker
          image: '172.50.15.65:8082/rancher/rancher/rancher/busybox:1.32'
          command:
            - sh
            - '-c'
            - |
              echo 'Waiting for PostgreSQL to become ready...'

              until printf "." && nc -z -w 2 keycloak-postgresql 5432; do
                  sleep 2;
              done;

              echo 'PostgreSQL OK âœ“'
          resources:
            limits:
              cpu: 200m
              memory: 265Mi
            requests:
              cpu: 200m
              memory: 265Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
      containers:
        - name: keycloak
          image: '172.50.15.65:8082/rancher/rancher/rancher/jboss/keycloak-zatca'
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: http-management
              containerPort: 9990
              protocol: TCP
          env:
            - name: DB_VENDOR
              value: postgres
            - name: DB_ADDR
              value: keycloak-postgresql
            - name: DB_PORT
              value: '5432'
            - name: DB_DATABASE
              value: keycloak
            - name: DB_USER
              value: keycloak
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgresql-password
          resources:
            limits:
              cpu: 3000m
              memory: 4048Mi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: startup
              readOnly: true
              mountPath: /opt/jboss/startup-scripts/keycloak.cli
              subPath: keycloak.cli
          livenessProbe:
            httpGet:
              path: /keycloak/auth/
              port: http
              scheme: HTTP
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /keycloak/auth/realms/master
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /keycloak/auth/
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 60
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1000
            runAsNonRoot: true
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      serviceAccountName: keycloak
      serviceAccount: keycloak
      securityContext:
        fsGroup: 1000
  serviceName: keycloak-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak-postgresql
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: keycloak
      app.kubernetes.io/name: postgresql
  template:
    metadata:
      name: keycloak-postgresql
      labels:
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/name: postgresql
    spec:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
      containers:
        - name: keycloak-postgresql
          image: '172.50.15.65:8082/rancher/rancher/rancher/postgresql:11.11.0-debian-10-r31'
          ports:
            - name: tcp-postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: BITNAMI_DEBUG
              value: 'false'
            - name: POSTGRESQL_PORT_NUMBER
              value: '5432'
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: keycloak
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: keycloak
            - name: POSTGRESQL_ENABLE_LDAP
              value: 'no'
            - name: POSTGRESQL_ENABLE_TLS
              value: 'no'
            - name: POSTGRESQL_LOG_HOSTNAME
              value: 'false'
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: 'false'
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: 'false'
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: 'off'
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - '-c'
                - >-
                  exec pg_isready -U "keycloak" -d "dbname=keycloak" -h
                  127.0.0.1 -p 5432
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - '-c'
                - '-e'
                - >
                  exec pg_isready -U "keycloak" -d "dbname=keycloak" -h
                  127.0.0.1 -p 5432

                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f
                  /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 1001
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        volumeMode: Filesystem
  serviceName: keycloak-postgresql-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-headless
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
  clusterIP: None
  clusterIPs:
    - None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-http
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
    - name: https
      protocol: TCP
      port: 8443
      targetPort: https
    - name: http-management
      protocol: TCP
      port: 9990
      targetPort: http-management
  selector:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgresql-headless
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: postgresql
spec:
  ports:
    - name: tcp-postgresql
      protocol: TCP
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: postgresql
  clusterIP: None
  clusterIPs:
    - None
  type: ClusterIP
  sessionAffinity: None
  publishNotReadyAddresses: true
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgresql
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: postgresql
spec:
  ports:
    - name: tcp-postgresql
      protocol: TCP
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: postgresql
    role: primary
  type: ClusterIP
  sessionAffinity: None
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-startup
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
data:
  keycloak.cli: >
    embed-server --server-config=standalone-ha.xml --std-out=echo

    batch


    echo Configuring node identifier


    ## Sets the node identifier to the node name (= pod name). Node identifiers
    have to be unique. They can have a

    ## maximum length of 23 characters. Thus, the chart's fullname template
    truncates its length accordingly.

    /subsystem=transactions:write-attribute(name=node-identifier,
    value=${jboss.node.name})


    echo Finished configuring node identifier


    run-batch

    stop-embedded-server
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-postgresql
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: postgresql
data:
  postgresql-password: a2V5Y2xvYWs=
  postgresql-postgres-password: UHcwUkhBYUptMQ==
type: Opaque
---
